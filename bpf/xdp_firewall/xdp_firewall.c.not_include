// +build ignore
#include "bpf_endian.h"
#include "common.h"

const __u8 IPPROTO_TCP = 6;		/* Transmission Control Protocol	*/

struct pair {
    __u32 ip;
    __u16 port;
};
/* Define an LRU hash map for storing packet count by source IPv4 address */
struct bpf_map_def SEC("maps") whitelist = {
    .type = BPF_MAP_TYPE_HASH,
    .key_size = sizeof(struct pair),
    .value_size = sizeof(__u32),
    .max_entries = 100,
};

struct tcphdr {
    __be16  source;
    __be16  dest;
    __be32  seq;
    __be32  ack_seq;
        __u16   res1:4,
                doff:4,
                fin:1,
                syn:1,
                rst:1,
                psh:1,
                ack:1,
                urg:1,
                ece:1,
                cwr:1;
    __be16  window;
    __sum16 check;
    __be16  urg_ptr;
};


SEC("xdp")
int tcp_firewall(struct xdp_md *ctx) {
    void *data = (void *)(long)ctx->data;
    void *data_end = (void *)(long)ctx->data_end;
    struct ethhdr *eth = data;
    struct pair key;
    u32 *value;

    if (data + sizeof(*eth) > data_end) {
        return XDP_DROP;
    }

    if (eth->h_proto != bpf_htons(ETH_P_IP)) {
        return XDP_PASS;
    }

   struct iphdr *iph = (void *)(eth + 1);
   	if ((void *)(iph + 1) > data_end) {
   		return XDP_ABORTED;
   	}

    if (iph->version != 4) {
        return XDP_DROP;
    }

    if (iph->protocol != IPPROTO_TCP) {
        return XDP_PASS;
    }

    struct tcphdr *tcph = (void *)(iph + 1);
    if ((void *)(tcph + 1) > data_end) {
        return XDP_ABORTED;
    }

    if (!(tcph->syn)) {
        return XDP_PASS;
    }

    key.ip = iph->saddr;
    key.port = tcph->source;
    value = bpf_map_lookup_elem(&whitelist, &key);
    if (value) {
        return XDP_PASS;
    }

    return XDP_DROP;
}
char _license[] SEC("license") = "GPL";
